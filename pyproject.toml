[build-system]
requires = ["setuptools>=61.2", "setuptools-rust", "pyvex==9.2.163.dev0"]
build-backend = "setuptools.build_meta"

[project]
name = "angr"
description = "A multi-architecture binary analysis toolkit, with the ability to perform dynamic symbolic execution and various static analyses on binaries"
license = { text = "BSD-2-Clause" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.10"
dependencies = [
    "cxxheaderparser",
    "GitPython",
    "archinfo==9.2.163.dev0",
    "cachetools",
    "capstone==5.0.3",
    "cffi>=1.14.0",
    "claripy==9.2.163.dev0",
    "cle==9.2.163.dev0",
    "mulpyplexer",
    "networkx!=2.8.1,>=2.0",
    "protobuf>=5.28.2",
    "psutil",
    "pycparser>=2.18",
    "pydemumble",
    "pyformlang",
    "pypcode>=3.2.1,<4.0",
    "pyvex==9.2.163.dev0",
    "rich>=13.1.0",
    "sortedcontainers",
    "sympy",
    "typing-extensions",
    "unique-log-filter",
    "colorama;platform_system=='Windows'",
]
dynamic = ["version"]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://angr.io/"
Repository = "https://github.com/angr/angr"

[project.optional-dependencies]
angrdb = ["sqlalchemy"]
keystone = ["keystone-engine"]
telemetry = ["opentelemetry-api"]
unicorn = ["unicorn==2.0.1.post1"]

[project.scripts]
angr = "angr.__main__:main"

[dependency-groups]
dev = [
    "black>=25.1.0",
    "pytest>=8.3.5",
    "pytest-durations>=1.4.0",
    "pytest-profiling>=1.8.1",
    "pytest-split>=0.10.0",
    "pytest-timeout>=2.3.1",
    "pytest-xdist>=3.6.1",
    "ruff>=0.11.7",
]
docs = ["furo", "myst-parser", "sphinx", "sphinx-autodoc-typehints"]
extras = ["angr[angrdb,keystone]"]

[tool.setuptools]
include-package-data = true
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
exclude = ["tests*"]
namespaces = false

[tool.setuptools.package-data]
angr = ["py.typed", "unicornlib.*", "rustylib.*"]

[tool.setuptools.dynamic]
version = { attr = "angr.__version__" }

[[tool.setuptools-rust.ext-modules]]
target = "angr.rustylib"
path = "native/angr/Cargo.toml"
debug = false

[tool.uv]
default-groups = ["dev", "extras"]

[tool.uv.sources]
archinfo = { git = "https://github.com/angr/archinfo.git", branch = "master" }
pyvex = { git = "https://github.com/angr/pyvex.git", branch = "master" }
cle = { git = "https://github.com/angr/cle.git", branch = "master" }
claripy = { git = "https://github.com/angr/claripy.git", branch = "master" }

[tool.black]
line-length = 120
target-version = ['py310']
force-exclude = '''
/(
  angr\/protos
| angr\/procedures\/definitions
)/
'''

[tool.ruff]
line-length = 120
exclude = [
    "*_pb2.py", # Autogenerated protobuf files
]

[tool.ruff.lint]
extend-select = [
    "B",
    "C4",
    "FURB",
    "I002",
    "PIE",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "TID252",
    "UP",
]
ignore = [
    "B011",   # Asserts
    "E402",   # Bottom imports
    "E741",   # Variable names
    "RUF012", # FIXME: Annotate class variables
    "UP038",  # Use `X | Y` in `isinstance` call instead of `(X, Y)`; it is slower
    "RUF007", # Prefer `itertools.pairwise()` over `zip()` when iterating over successive pairs
    "B905",   # Zip calls without an explicit strict parameter
    "RET501", # rewrites "return None" to "return" if it's the only return statement; pylint then removes the return
]

[tool.ruff.lint.per-file-ignores]
"angr/misc/bug_report.py" = [
    "F821", # name not found
]
"angr/procedures/definitions/*" = [ # TODO: Move to exclude
    "F601", # TODO: BUG! This hides bugs! See: https://github.com/angr/angr/issues/3685
    "E501", # No line length check
    "F401",
]
"angr/state_plugins/solver.py" = [
    "E501", # Long docstrings with examples
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
